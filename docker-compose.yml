version: "3.9"

services:
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    volumes:
      - ./data/kafka:/var/run/docker.sock
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka # should match this service name
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 # should match zookeeper service name
    depends_on:
      - zookeeper
  mysql:
    container_name: mysql
    image: mysql:8.0.33
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    ports:
      - "3306:3306"
    env_file:
      - ./.env
    environment:
      - MYSQL_ROOT_PASSWORD=$MYSQL_PASSWORD
      - MYSQL_DATABASE=$MYSQL_DATABASE
      - MYSQL_PASSWORD=$MYSQL_PASSWORD
    volumes:
      # this creates a named volume `api_db_data` to be stored outside the mysql container (in case the container is deleted, data still exists)
      - api_db_data:/var/lib/mysql

  instructor_service:
    container_name: instructor_service
    build: ./apps/instructor
    env_file:
      - ./.env
    ports:
      - "${EXPOSED_PORT_INSTRUCTOR}:${PORT}"
    volumes:
      - ./apps/instructor:/app
    depends_on:
      - kafka
      - mysql

  student_service:
    container_name: student_service
    build: ./apps/student
    env_file:
      - ./.env
    ports:
      - "${EXPOSED_PORT_STUDENT}:${PORT}"
    environment:
      - MYSQL_HOST=mysql
    volumes:
      - ./apps/student:/app
    depends_on:
      - kafka
      - mysql

volumes:
  data: {}
  api_db_data: {}
